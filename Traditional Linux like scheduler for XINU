/* resched.c  -  resched */

#include <conf.h>
#include <kernel.h>
#include <proc.h>
#include <q.h>
#include <lab1.h>


unsigned long currSP;	/* REAL sp of current process */
extern int ctxsw(int, int, int, int);

/*-----------------------------------------------------------------------
* resched  --  reschedule processor to highest priority ready process
*
* Notes:	Upon entry, currpid gives current process id.
*		Proctab[currpid].pstate gives correct NEXT state for
*			current process if other than PRREADY.
*------------------------------------------------------------------------
*/

int scheduleLinux()
{	
	int epoch_return;
	register struct	pentry	*optr;	/* pointer to old process entry */
	register struct	pentry	*nptr;	/* pointer to new process entry */
	
	
	/*.............LINUX LIKE SCHEDULER......................*/

	optr = &proctab[currpid];
	optr->used_time = optr->used_time + optr->counter - preempt;
	optr->counter = optr->quantum_alloc - optr->used_time;
	
	if(optr->counter < 0)
	{
		optr->counter = 0;
	}
	
	if(optr->counter == 0)
	{
		if(isempty(rdyhead))
		{		
			epoch_return = get_epoch();
			if(epoch_return == 2)
			{
				return 1;
			}
		}
		else
		{
			if(optr->pstate == PRCURR)
			{
				optr->pstate = PRREADY;
			}
		}
	}
	if((optr->pstate == PRCURR)  && (isempty(rdyhead) || get_goodness(optr) > lastkey(rdytail)))
	{
		if(optr->created_by == 1)
		{
			return 0;
		}
	}
	
	
	if((optr->pstate == PRCURR) && (get_goodness(optr) <= lastkey(rdytail)) && (currpid!=0))
	{
		optr->pstate = PRREADY;
		if(optr->counter > 0 && optr->created_by == 1)
		{	
			insert(currpid,rdyhead,get_goodness(optr));	
		}
	}

	
	if(optr->pstate == PRCURR)
	{
		optr->pstate = PRREADY;
		if(optr->counter > 0 && optr->created_by == 1)
		{	
			insert(currpid,rdyhead,get_goodness(optr));	
		}
	}
	
	nptr = &proctab[ (currpid = getlast(rdytail)) ];
	dequeue(currpid);
	nptr->pstate = PRCURR;
	if(nptr->counter>0)
	{
		preempt = nptr->counter;
	}
	else 
	{
		preempt = nptr->pprio;
	}
	ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
	return 0;
}

int scheduleReal()
{
	int epoch_return = 0;
	register struct	pentry	*optr;	/* pointer to old process entry */
	register struct	pentry	*nptr;	/* pointer to new process entry */

	optr= &proctab[currpid];
	optr->used_time = optr->used_time + optr->counter - preempt;
	optr->counter = optr->quantum_alloc - optr->used_time;
	
	if(optr->counter < 0)
	{
		optr->counter = 0;
	}



	if(isempty(rdyhead_real))
	{	
		
		//kprintf("\n%d,%d,%d,%d\n",optr->quantum_alloc,optr->counter,optr->used_time,preempt);
		//kprintf("\nIn scheduleReal:>>>>>>>>>\n");
		//kprintf("\nepoch_return: %d\n",epoch_return);
		//epoch_return = get_epoch();
		if(epoch_return == 1)
		{
			return 1;
		}
		if(isempty(rdyhead_real))
		{
			return 1;
		}
	}
	
	if (optr->pstate == PRCURR) {
		optr->pstate = PRREADY;
	}

	
	if(optr->created_by == 1 && optr->counter > 0)
	{
		insert(currpid, rdyhead, get_goodness(optr));
	}
	nptr = &proctab[ (currpid = getlast(rdytail_real)) ];
	dequeue(currpid);
	nptr->pstate = PRCURR;		/* mark it currently running	*/
	preempt = 100;		/* reset preemption counter	*/
	ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
	
	return 0;
}

int resched()
{
	

	if(currpid == 0)
	{
		int k,l;
		k = 0;
		for(l=1; l <NPROC; l++)
		{
			if(proctab[l].pstate == PRREADY)
			{
				k++;
				break;
			}
		}
		if (k == 0)
		{
			return OK;
		}
	}

	if(schedqueue == 0)
	{
		if( scheduleLinux() == 1) {
			schedqueue = 1;
			scheduleReal();
		}
		return OK;
	} 
	else if (schedqueue == 1) {
		if(scheduleReal() == 1) {
			schedqueue = 0;
			scheduleLinux();
		}
		return OK;
	}
	else
	{

		register struct	pentry	*optr;	/* pointer to old process entry */
		register struct	pentry	*nptr;	/* pointer to new process entry */

		if ( ( (optr= &proctab[currpid])->pstate == PRCURR) &&
				(lastkey(rdytail)<optr->pprio)) {
			return(OK);
		}
		
		/* force context switch */

		if (optr->pstate == PRCURR) {
			optr->pstate = PRREADY;
			insert(currpid,rdyhead,optr->pprio);
		}

		/* remove highest priority process at end of ready list */

		nptr = &proctab[ (currpid = getlast(rdytail)) ];
		nptr->pstate = PRCURR;		/* mark it currently running	*/
#ifdef	RTCLOCK
		preempt = QUANTUM;		/* reset preemption counter	*/
#endif
		
		ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
		
		/* The OLD process returns here when resumed. */
		return OK;

	}
}
